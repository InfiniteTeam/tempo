// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id      String @id @default(cuid())
  userId  String
  guildId String

  guild    Guild           @relation(fields: [guildId], references: [id])
  voice    VoiceCount[]
  message  MessageCount[]
  activity ActivityCount[]
}

model Guild {
  id       String  @id
  archived Boolean @default(false)

  user     User[]
  voice    VoiceCount[]
  message  MessageCount[]
  settings GuildSettings?
}

model GuildSettings {
  id    String @id
  guild Guild  @relation(fields: [id], references: [id])

  allUserRegister Boolean @default(false)

  voiceCount    Boolean @default(true)
  messageCount  Boolean @default(false)
  activityCount Boolean @default(false)
}

model VoiceCount {
  time        DateTime @default(now()) @db.Timestamptz()
  channelName String   @default("")
  value       Int
  userId      String
  guildId     String

  guild Guild @relation(fields: [guildId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([userId, guildId, time])
  @@index([time(sort: Desc)])
}

model MessageCount {
  time    DateTime @default(now()) @db.Timestamptz()
  userId  String
  guildId String
  count   Int

  guild Guild @relation(fields: [guildId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([userId, guildId, time])
  @@index([time(sort: Desc)])
}

model ActivityCount {
  time   DateTime     @default(now()) @db.Timestamptz()
  userId String
  count  Int
  status ActiveStatus
  user   User         @relation(fields: [userId], references: [id])

  @@unique([userId, time])
  @@index([time(sort: Desc)])
}

enum ActiveStatus {
  Online
  DoNotDisturb
  Idle
  Offline
}
